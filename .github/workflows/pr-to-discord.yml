name: pr to discord

on:
  workflow_dispatch:
  pull_request_target:
    types: [opened, reopened, ready_for_review, closed, submitted]

jobs:
  notify-discord:
    runs-on: ubuntu-latest

    steps:
      - name: Get PR reviewers
        id: reviewers
        if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'ready_for_review'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          echo "Fetching reviewers for PR #$PR_NUMBER from $REPO"

          API_RESPONSE=$(gh api repos/$REPO/pulls/$PR_NUMBER 2>err.log || echo "")
          if [ -s err.log ]; then
            echo "Error from GitHub API:"
            cat err.log
          fi

          if [ -z "$API_RESPONSE" ]; then
            REVIEWERS="[]"
          else
            REVIEWERS=$(echo "$API_RESPONSE" | jq -c '[.requested_reviewers?[]?.login] // []')
          fi

          echo "Reviewers JSON: $REVIEWERS"

          REVIEWERS_B64=$(echo "$REVIEWERS" | base64)
          echo "reviewers_b64=$REVIEWERS_B64" >> "$GITHUB_OUTPUT"

      - name: Notify Discord (new PR)
        if: github.event.action == 'opened' || github.event.action == 'reopened' || github.event.action == 'ready_for_review'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          USER_MAP: ${{ secrets.USER_MAP }}
        run: |
          set -euo pipefail

          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          REVIEWERS_JSON=$(echo "${{ steps.reviewers.outputs.reviewers_b64 }}" | base64 --decode)
          echo "Parsed reviewers: $REVIEWERS_JSON"

          MENTION_LIST=""
          for user in $(echo "$REVIEWERS_JSON" | jq -r '.[]'); do
            DISCORD_ID=$(echo "$USER_MAP" | jq -r --arg u "$user" '.[$u] // empty')
            if [ -n "$DISCORD_ID" ]; then
              MENTION_LIST="$MENTION_LIST <@$DISCORD_ID>"
            else
              MENTION_LIST="$MENTION_LIST @$user"
            fi
          done

          if [ -z "$MENTION_LIST" ]; then
            MENTION_LIST="(Î¶¨Î∑∞Ïñ¥Í∞Ä ÏßÄÏ†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§)"
          fi

          curl -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "content": "${MENTION_LIST}\nüì¢ ÏÉàÎ°úÏö¥ PR: **${PR_TITLE}**\n${PR_URL}"
          }
          EOF

      - name: Notify Discord (merged PR)
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          set -euo pipefail

          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"

          MSG="‚úÖ PR Î®∏ÏßÄ ÏôÑÎ£å: **${PR_TITLE}**\n<${PR_URL}>"

          curl -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"content\": \"$MSG\"}"

      - name: Notify Discord (approved review)
        if: github.event.review.state == 'approved'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"

          # PR ÏÉÅÏÑ∏Ï†ïÎ≥¥Î•º GitHub APIÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞ (Ìè¨ÌÅ¨ PR ÏßÄÏõê)
          API_RESPONSE=$(gh api repos/$REPO/pulls/$PR_NUMBER)
          PR_TITLE=$(echo "$API_RESPONSE" | jq -r '.title')
          PR_URL=$(echo "$API_RESPONSE" | jq -r '.html_url')

          REVIEWER="${{ github.event.review.user.login }}"
          MSG="üëç **${REVIEWER}** ÎãòÏù¥ PRÏùÑ ÏäπÏù∏ÌñàÏäµÎãàÎã§: **${PR_TITLE}**\n<${PR_URL}>"

          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "Skipping Discord notification: no webhook URL"
            exit 0
          fi

          curl -X POST "$DISCORD_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"content\": \"$MSG\"}"
